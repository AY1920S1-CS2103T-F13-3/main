@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class SpendingBookParser
Class XYZCommandParser
Class ReminderCommandParser
Class XYZReminderCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
package Reminder {
Class XYZReminderCommand
}
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" SpendingBookParser
SpendingBookParser .left.> XYZCommandParser: creates >
SpendingBookParser .left.> ReminderCommandParser: creates >
ReminderCommandParser .right.> XYZReminderCommandParser: creates >
ReminderCommandParser .down.|> Parser

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer

XYZReminderCommandParser ..|> Parser
XYZReminderCommandParser ..> ArgumentMultimap
XYZReminderCommandParser ..> ArgumentTokenizer


ArgumentTokenizer ..> ArgumentMultimap
XYZCommandParser ..> CliSyntax
XYZReminderCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
XYZReminderCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
XYZReminderCommand -up-|> XYZCommand
LogicManager .left.> Command : executes >

XYZReminderCommandParser ..> XYZReminderCommand : creates >

LogicManager --> Model
Command .right.> Model
note right of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc
note right of XYZReminderCommand: XYZReminderCommand = AddReminderCommand, \nDeleteReminderCommand

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
